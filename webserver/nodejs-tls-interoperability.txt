// save as: server.js
// run with: node server.js
const https = require("https"), fs = require("fs"), express = require("express"), helmet = require("helmet");
const options = {
    key: fs.readFileSync("/etc/ssl/private/ssl-server-cert-key.key"),
    cert: fs.readFileSync("/etc/ssl/certs/ssl-server-cert.pem"),
    ciphers: "TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-AES256-CCM-8:ECDHE-ECDSA-AES256-CBC-SHA384:DHE-RSA-AES256-CCM:DHE-RSA-AES256-CCM-8:ECDHE-RSA-AES256-CBC-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-AES128-CCM-8:ECDHE-ECDSA-AES128-CBC-SHA256:ECDHE-ECDSA-AES128-CBC-SHA:ECDHE-ECDSA-AES256-CBC-SHA:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-CCM:DHE-RSA-AES128-CCM-8:ECDHE-RSA-AES128-CBC-SHA256:DHE-RSA-AES128-CBC-SHA256:DHE-RSA-AES256-CBC-SHA256:ECDHE-RSA-AES128-CBC-SHA:ECDHE-RSA-AES256-CBC-SHA:DHE-RSA-AES128-CBC-SHA:DHE-RSA-AES256-CBC-SHA",
    ecdhCurve: "secp384r1:secp521r1:secp256r1:secp224r1:sect571r1:sect571k1:sect409r1:sect409k1:sect283r1:sect283k1:sect233r1:sect233k1",
    honorCipherOrder: true,
    minVersion: "TLSv1.2",
    maxVersion: "TLSv1.3"
};

const app = express();

app.use(helmet());

app.use((req, res) => {
res.writeHead(200);
res.end("test app\n");
});


https.createServer(options, app).listen(443);

